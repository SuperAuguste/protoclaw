//! THIS FILE IS AUTOMATICALLY GENERATED; do not modify!

const std = @import("std");

pub const scip = struct {
    pub const Index = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .metadata = 1,
                .documents = 2,
                .external_symbols = 3,
            },
        };

        metadata: scip.Metadata = .{},
        documents: std.ArrayListUnmanaged(scip.Document) = .{},
        external_symbols: std.ArrayListUnmanaged(scip.SymbolInformation) = .{},
    };

    pub const Metadata = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .version = 1,
                .tool_info = 2,
                .project_root = 3,
                .text_document_encoding = 4,
            },
        };

        version: scip.ProtocolVersion = @enumFromInt(0),
        tool_info: scip.ToolInfo = .{},
        project_root: []const u8 = "",
        text_document_encoding: scip.TextEncoding = @enumFromInt(0),
    };

    pub const ProtocolVersion = enum(i32) {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
        };

        UnspecifiedProtocolVersion = 0,
    };

    pub const TextEncoding = enum(i32) {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
        };

        UnspecifiedTextEncoding = 0,
        UTF8 = 1,
        UTF16 = 2,
    };

    pub const ToolInfo = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .name = 1,
                .version = 2,
                .arguments = 3,
            },
        };

        name: []const u8 = "",
        version: []const u8 = "",
        arguments: std.ArrayListUnmanaged([]const u8) = .{},
    };

    pub const Document = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .language = 4,
                .relative_path = 1,
                .occurrences = 2,
                .symbols = 3,
                .text = 5,
            },
        };

        language: []const u8 = "",
        relative_path: []const u8 = "",
        occurrences: std.ArrayListUnmanaged(scip.Occurrence) = .{},
        symbols: std.ArrayListUnmanaged(scip.SymbolInformation) = .{},
        text: []const u8 = "",
    };

    pub const Symbol = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .scheme = 1,
                .package = 2,
                .descriptors = 3,
            },
        };

        scheme: []const u8 = "",
        package: scip.Package = .{},
        descriptors: std.ArrayListUnmanaged(scip.Descriptor) = .{},
    };

    pub const Package = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .manager = 1,
                .name = 2,
                .version = 3,
            },
        };

        manager: []const u8 = "",
        name: []const u8 = "",
        version: []const u8 = "",
    };

    pub const Descriptor = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .name = 1,
                .disambiguator = 2,
                .suffix = 3,
            },
        };

        pub const Suffix = enum(i32) {
            pub const protobuf_metadata = .{
                .syntax = .proto3,
            };

            UnspecifiedSuffix = 0,
            Namespace = 1,
            Package = 1,
            Type = 2,
            Term = 3,
            Method = 4,
            TypeParameter = 5,
            Parameter = 6,
            Meta = 7,
            Local = 8,
            Macro = 9,
        };

        name: []const u8 = "",
        disambiguator: []const u8 = "",
        suffix: scip.Descriptor.Suffix = @enumFromInt(0),
    };

    pub const SymbolInformation = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .symbol = 1,
                .documentation = 3,
                .relationships = 4,
                .kind = 5,
                .display_name = 6,
                .signature_documentation = 7,
                .enclosing_symbol = 8,
            },
        };

        pub const Kind = enum(i32) {
            pub const protobuf_metadata = .{
                .syntax = .proto3,
            };

            UnspecifiedKind = 0,
            Array = 1,
            Assertion = 2,
            AssociatedType = 3,
            Attribute = 4,
            Axiom = 5,
            Boolean = 6,
            Class = 7,
            Constant = 8,
            Constructor = 9,
            Contract = 62,
            DataFamily = 10,
            Enum = 11,
            EnumMember = 12,
            Error = 63,
            Event = 13,
            Fact = 14,
            Field = 15,
            File = 16,
            Function = 17,
            Getter = 18,
            Grammar = 19,
            Instance = 20,
            Interface = 21,
            Key = 22,
            Lang = 23,
            Lemma = 24,
            Library = 64,
            Macro = 25,
            Method = 26,
            MethodReceiver = 27,
            Message = 28,
            Modifier = 65,
            Module = 29,
            Namespace = 30,
            Null = 31,
            Number = 32,
            Object = 33,
            Operator = 34,
            Package = 35,
            PackageObject = 36,
            Parameter = 37,
            ParameterLabel = 38,
            Pattern = 39,
            Predicate = 40,
            Property = 41,
            Protocol = 42,
            Quasiquoter = 43,
            SelfParameter = 44,
            Setter = 45,
            Signature = 46,
            Subscript = 47,
            String = 48,
            Struct = 49,
            Tactic = 50,
            Theorem = 51,
            ThisParameter = 52,
            Trait = 53,
            Type = 54,
            TypeAlias = 55,
            TypeClass = 56,
            TypeFamily = 57,
            TypeParameter = 58,
            Union = 59,
            Value = 60,
            Variable = 61,
        };

        symbol: []const u8 = "",
        documentation: std.ArrayListUnmanaged([]const u8) = .{},
        relationships: std.ArrayListUnmanaged(scip.Relationship) = .{},
        kind: scip.SymbolInformation.Kind = @enumFromInt(0),
        display_name: []const u8 = "",
        signature_documentation: scip.Document = .{},
        enclosing_symbol: []const u8 = "",
    };

    pub const Relationship = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .symbol = 1,
                .is_reference = 2,
                .is_implementation = 3,
                .is_type_definition = 4,
                .is_definition = 5,
            },
        };

        symbol: []const u8 = "",
        is_reference: bool = false,
        is_implementation: bool = false,
        is_type_definition: bool = false,
        is_definition: bool = false,
    };

    pub const SymbolRole = enum(i32) {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
        };

        UnspecifiedSymbolRole = 0,
        Definition = 1,
        Import = 2,
        WriteAccess = 4,
        ReadAccess = 8,
        Generated = 16,
        Test = 32,
    };

    pub const SyntaxKind = enum(i32) {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
        };

        UnspecifiedSyntaxKind = 0,
        Comment = 1,
        PunctuationDelimiter = 2,
        PunctuationBracket = 3,
        Keyword = 4,
        IdentifierOperator = 5,
        Identifier = 6,
        IdentifierBuiltin = 7,
        IdentifierNull = 8,
        IdentifierConstant = 9,
        IdentifierMutableGlobal = 10,
        IdentifierParameter = 11,
        IdentifierLocal = 12,
        IdentifierShadowed = 13,
        IdentifierNamespace = 14,
        IdentifierFunction = 15,
        IdentifierFunctionDefinition = 16,
        IdentifierMacro = 17,
        IdentifierMacroDefinition = 18,
        IdentifierType = 19,
        IdentifierBuiltinType = 20,
        IdentifierAttribute = 21,
        RegexEscape = 22,
        RegexRepeated = 23,
        RegexWildcard = 24,
        RegexDelimiter = 25,
        RegexJoin = 26,
        StringLiteral = 27,
        StringLiteralEscape = 28,
        StringLiteralSpecial = 29,
        StringLiteralKey = 30,
        CharacterLiteral = 31,
        NumericLiteral = 32,
        BooleanLiteral = 33,
        Tag = 34,
        TagAttribute = 35,
        TagDelimiter = 36,
    };

    pub const Occurrence = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .range = 1,
                .symbol = 2,
                .symbol_roles = 3,
                .override_documentation = 4,
                .syntax_kind = 5,
                .diagnostics = 6,
                .enclosing_range = 7,
            },
        };

        range: std.ArrayListUnmanaged(i32) = .{},
        symbol: []const u8 = "",
        symbol_roles: i32 = 0,
        override_documentation: std.ArrayListUnmanaged([]const u8) = .{},
        syntax_kind: scip.SyntaxKind = @enumFromInt(0),
        diagnostics: std.ArrayListUnmanaged(scip.Diagnostic) = .{},
        enclosing_range: std.ArrayListUnmanaged(i32) = .{},
    };

    pub const Diagnostic = struct {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
            .field_numbers = .{
                .severity = 1,
                .code = 2,
                .message = 3,
                .source = 4,
                .tags = 5,
            },
        };

        severity: scip.Severity = @enumFromInt(0),
        code: []const u8 = "",
        message: []const u8 = "",
        source: []const u8 = "",
        tags: std.ArrayListUnmanaged(scip.DiagnosticTag) = .{},
    };

    pub const Severity = enum(i32) {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
        };

        UnspecifiedSeverity = 0,
        Error = 1,
        Warning = 2,
        Information = 3,
        Hint = 4,
    };

    pub const DiagnosticTag = enum(i32) {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
        };

        UnspecifiedDiagnosticTag = 0,
        Unnecessary = 1,
        Deprecated = 2,
    };

    pub const Language = enum(i32) {
        pub const protobuf_metadata = .{
            .syntax = .proto3,
        };

        UnspecifiedLanguage = 0,
        ABAP = 60,
        APL = 49,
        Ada = 39,
        Agda = 45,
        AsciiDoc = 86,
        Assembly = 58,
        Awk = 66,
        Bat = 68,
        BibTeX = 81,
        C = 34,
        COBOL = 59,
        CPP = 35,
        CSS = 26,
        CSharp = 1,
        Clojure = 8,
        Coffeescript = 21,
        CommonLisp = 9,
        Coq = 47,
        Dart = 3,
        Delphi = 57,
        Diff = 88,
        Dockerfile = 80,
        Dyalog = 50,
        Elixir = 17,
        Erlang = 18,
        FSharp = 42,
        Fish = 65,
        Flow = 24,
        Fortran = 56,
        Git_Commit = 91,
        Git_Config = 89,
        Git_Rebase = 92,
        Go = 33,
        Groovy = 7,
        HTML = 30,
        Hack = 20,
        Handlebars = 90,
        Haskell = 44,
        Idris = 46,
        Ini = 72,
        J = 51,
        JSON = 75,
        Java = 6,
        JavaScript = 22,
        JavaScriptReact = 93,
        Jsonnet = 76,
        Julia = 55,
        Kotlin = 4,
        LaTeX = 83,
        Lean = 48,
        Less = 27,
        Lua = 12,
        Makefile = 79,
        Markdown = 84,
        Matlab = 52,
        Nix = 77,
        OCaml = 41,
        Objective_C = 36,
        Objective_CPP = 37,
        PHP = 19,
        PLSQL = 70,
        Perl = 13,
        PowerShell = 67,
        Prolog = 71,
        Python = 15,
        R = 54,
        Racket = 11,
        Raku = 14,
        Razor = 62,
        ReST = 85,
        Ruby = 16,
        Rust = 40,
        SAS = 61,
        SCSS = 29,
        SML = 43,
        SQL = 69,
        Sass = 28,
        Scala = 5,
        Scheme = 10,
        ShellScript = 64,
        Skylark = 78,
        Solidity = 95,
        Swift = 2,
        TOML = 73,
        TeX = 82,
        TypeScript = 23,
        TypeScriptReact = 94,
        VisualBasic = 63,
        Vue = 25,
        Wolfram = 53,
        XML = 31,
        XSL = 32,
        YAML = 74,
        Zig = 38,
    };
};
